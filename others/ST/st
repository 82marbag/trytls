#!/bin/bash

cmdf=$1       #command + file, for example: "mono ../trytls/stubs/FSharp-net/run.exe"
ca=$2         #ca-bundle/certificate, for example: /etc/ssl/certs/ca-certificate.crt

errors="There were some errors"

#this cannot be done for cmdf (at least in any simple way)
#that's because there must not always be an 'actual filename' in the cmdf (for example java Run) -> no such file
if [[ $ca && ! -f $ca ]]; then
  echo "Error: no such file or directory: $ca"
  echo $errors
  exit 1
fi

retval=0    #what value to exit with
retstring=""

# This script can be used in testing if a stub returns correct values or not

test() {

  cmd=$1
  resp=$2            #what resp to expect to
  val=$3             #what exit value to expect to
  maxStringErrors=$4 #how many errors until fatal error
  if [[ ! $maxStringErrors || $maxStringErrors == "--" ]]; then
    maxStringErrors=9999;
  fi
  maxValErrors=$5    #how many errors until fatal error
  if [[ ! $maxValErrors || $maxValErrors == "--" ]]; then
    maxValErrors=9999;
  fi
  err=$6              #error message (to be printed if error occurs)
  extra=$7            #only one extra(!) currently so no need for 'more special' checks
  #run stub, get response and exit value
  response=`$cmdf $cmd 2>&1`; errval=$?
  if [[ $errval != 0 ]]; then
    errval=1;
  fi

  ok=`echo "$response" | grep "$resp"`

  if [[ $ok && ! $extra || $extra && ! $ok ]]; then #something might be wrong
    (( stringErrors++ ))
    if [[ $stringErrors > $maxStringErrors ]]; then #ya something is most definitely wrong
      retstring=$err    # set error message
      retval=1          # -> exit ...
    fi
  fi
  if [[ $errval == $val && ! $extra || $extra && $errval != $val  ]]; then #something might be wrong
    (( valErrors++ ))
    if [[ $valErrors > $maxValErrors ]]; then #ya something is most definitely wrong
      retstring=$err    # set error message
      retval=1          # -> exit ...
    fi
  fi
}

#these are in variables, so that they are easy to edit if needed
FAILURE="REJECT"
SUCCESS="ACCEPT"
UNSUPPORTED="UNSUPPORTED"

# Terms used:

# [DON'T CARE] -> No matter what the string is, we do not care!
# [--]         -> No matter how many errors of this kind (either string or exit value), we do not care!


#test "<host> <port> [ca-bundle]" <expected (<response> <exit value>)> <error message> <max stringErrors> <max valErrors>

stringErrors=0; valErrors=0
c=0   #checks, (0,1),2,4,16,... currently needed: 2^0-1 and 2^1-1 == 0 (either without or within ca-bunde) and 1 (both without and within ca-bundle)
test "host port $ca" "$UNSUPPORTED" 1 1 -- "DON'T CARE"
if [[ $ca && $stringErrors != 0 ]]; then
  echo "Error: the stub does not support ca-bundles"
  echo $errors
  exit 1
fi
test "host port"     "$UNSUPPORTED" 1 1 -- "Error: UNSUPPORTS calling convention (returns always $UNSUPPORTED?)"
if [[ ! $ca && $stringErrors != 0 ]]; then
  echo "Error: the stub does not support being without ca-bundles"
  echo $errors
  exit 1
elif [[ $ca && $stringErrors == 0 ]]; then     #can be without and within ca-bundles
  c=1
fi
if [[ $retval == 0 ]]; then
  valErrors=0
  test "google.com 443 $ca" "DON'T CARE" 1 -- 0 "Error: Does not return 0 when 2 or 3 arguments given"
  if [[ $c != 0 ]]; then
    test "google.com 443"   "DON'T CARE" 1 -- 0 "Error: Does not return 0 when 2 or 3 arguments given"
  fi
  if [[ $retval == 0 ]]; then
    valErrors=0
    test "host"               "DON'T CARE" 0 -- 0 "Error: Does not care about the number of parameters, exits always with process value 0"
    if [[ $retval == 0 ]]; then
      test "host port ca foo" "DON'T CARE" 0 -- 0 "Error: Does not care about the number of parameters, exits always with process value 0"
    fi
    if [[ $retval == 0 ]]; then
      stringErrors=0;
      test "google.com 443 $ca" "$SUCCESS" 1 $c -- "(can't connect to google.com:443 - return $FAILURE always?)" "!"
      if [[ $c != 0 ]]; then
        test "google.com 443"   "$SUCCESS" 1 $c -- "(can't connect to google.com:443 - return $FAILURE always?)" "!"
      fi
      if [[ $retval == 0 ]]; then
        stringErrors=0;
        test "ssllabs.com 10444 $ca" "$FAILURE" 1 $c -- "can connect to ssllabs.com:10443 [FREAK] - return $SUCCESS always?" "!"
        if [[ $c != 0 ]]; then
          test "ssllabs.com 10444"   "$FAILURE" 1 $c -- "can connect to ssllabs.com:10443 [FREAK] - return $SUCCESS always?" "!"
        fi
        if [[ $retval == 0 ]]; then
          stringErrors=0;
          test "idonotexistnameresfailure.com 443 $ca" "$FAILURE" 1 $c -- "(returns $FAILURE when nameresolution error, should return something else)"
          if [[ $c != 0 ]]; then
            test "idonotexistnameresfailure.com 443"   "$FAILURE" 1 $c -- "(returns $FAILURE when nameresolution error, should return something else)"
          fi
          if [[ $retval == 0 ]]; then
            valErrors=0;
            test "idonotexistnameresfailure.com 443 $ca" "DON'T CARE" 0 -- 0 "(returns 0 when nameresolution error, should return something else)"
            if [[ $retval == 0 ]]; then
              test "idonotexistnameresfailure.com 443"   "DON'T CARE" 0 -- 0 "(returns 0 when nameresolution error, should return something else)"
            fi
          fi
        fi
      fi
    fi
  fi
fi

if [[ $retval == 0 ]]; then
  echo "ok!"
else
  echo -e $retstring
  echo $errors
fi

exit $retval
