#!/bin/bash

cmdf=$1       #command + file ["mono ../trytls/stubs/FSharp-net/run.exe"]
ca=$2         #ca-bundle/certificate

retval=0    #what value to exit with
retstring=""

# This script can be used in testing if a stub returns correct values or not

test() {

  cmd=$1
  resp=$2            #what resp to expect to
  val=$3             #what exit value to expect to
  maxStringErrors=$4 #how many errors until fatal error
  if [[ ! $maxStringErrors || $maxStringErrors == "--" ]]; then
    maxStringErrors=9999;
  fi
  maxValErrors=$5    #how many errors until fatal error
  if [[ ! $maxValErrors || $maxValErrors == "--" ]]; then
    maxValErrors=9999;
  fi
  err=$6              #error message (to be printed if error occurs)
  extra=$7            #only one extra(!) currently so no need for 'more special' checks
  #run stub, get response and exit value
  response=`$cmdf $cmd 2>1`; errval=$?
  if [[ $errval != 0 ]]; then
    errval=1;
  fi

  ok=`echo "$response" | grep "$resp"`

  if [[ $ok && ! $extra || $extra && ! $ok ]]; then #"correct" response + value
    (( stringErrors++ ))
    if [[ $stringErrors > $maxStringErrors ]]; then  #errval != val -> fatal error
      retstring=$err
      retval=1          #other than zero
    fi
  fi
  if [[ $errval == $val && ! $extra || $extra && $errval != $val  ]]; then
    (( valErrors++ ))
    if [[ $valErrors > $maxValErrors ]]; then  #errval != val -> fatal error
      retstring=$err
      retval=1          #other than zero
    fi
  fi
}

#test "<host> <port> [ca-bundle]" <expected (<response> <exit value>)> <error message> <max stringErrors> <max valErrors>

FAILURE="REJECT"
SUCCESS="ACCEPT"
UNSUPPORTED="UNSUPPORTED"

stringErrors=0; valErrors=0
c=0   #checks, (0,1),2,4,16,...
test "host port $ca" "UNSUPPORTED" 1 1 -- "DON'T CARE"
if [[ $ca && $stringErrors != 0 ]]; then
  echo "HOX! the stub does not support ca-bundles"
fi
test "host port"   "UNSUPPORTED" 1 1 -- "stub UNSUPPORTS calling convention, you sure it is working correctly?"
if [[ ! $ca && $stringErrors != 0 ]]; then
  echo "HOX! the stub does not support being without ca-bundles"
elif [[ $ca && $stringErrors == 0 ]]; then     #can be without and within ca-bundles
  c=1
fi
if [[ $retval == 0 ]]; then
  valErrors=0
  test "google.com 443 $ca" "DON'T CARE" 1 -- $c "stub exited with value other than 0 even though it should not have"
  if [[ $c != 0 ]]; then
    test "google.com 443"     "DON'T CARE" 1 -- $c "stub exited with value other than 0 even though it should not have"
  fi
  if [[ $retval == 0 ]]; then
    valErrors=0
    test "host port ca foo" "DON'T CARE" 0 -- 0 "stub exited with value 0 even though it should not have (too many arguments)"
    if [[ $retval == 0 ]]; then
      test "host"             "DON'T CARE" 0 -- 0 "stub exited with value 0 even though it should not have (too few arguments)"
    fi
    if [[ $retval == 0 ]]; then
      stringErrors=0;
      test "google.com 443 $ca" "$SUCCESS" 1 $c -- "(can't connect to google.com:443 - return $FAILURE always?)" "!"
      if [[ $c != 0 ]]; then
        test "google.com 443"   "$SUCCESS" 1 $c -- "(can't connect to google.com:443 - return $FAILURE always?)" "!"
      fi
      if [[ $retval == 0 ]]; then
        stringErrors=0;
        test "ssllabs.com 10444 $ca" "$FAILURE" 1 $c -- "can connect to ssllabs.com:10443 [FREAK], you sure it isn't returing $SUCCESS always?" "!"
        if [[ $c != 0 ]]; then
          test "ssllabs.com 10444"   "$FAILURE" 1 $c -- "can connect to ssllabs.com:10443 [FREAK], you sure it isn't returing $SUCCESS always?" "!"
        fi
        if [[ $retval == 0 ]]; then
          stringErrors=0;
          test "idonotexistnameresfailure.com 443 $ca" "$FAILURE" 1 $c -- "(returns $FAILURE even when nameresolution error should be returned)"
          if [[ $c != 0 ]]; then
            test "idonotexistnameresfailure.com 443"   "$FAILURE" 1 $c -- "(returns $FAILURE even when nameresolution error should be returned)"
          fi
          if [[ $retval == 0 ]]; then
            valErrors=0;
            test "idonotexistnameresfailure.com 443 $ca" "DON'T CARE" 0 -- 0 "(returns 0 when fatal error happens, should return something else)"
            if [[ $retval == 0 ]]; then
              test "idonotexistnameresfailure.com 443"   "DON'T CARE" 0 -- 0 "(returns 0 when fatal error happens, should return something else)"
            fi
          fi
        fi
      fi
    fi
  fi
fi

if [[ $retval == 0 ]]; then
  echo "ok!"
else
  echo -e $retstring
  echo "There were some errors"
fi

exit $retval
