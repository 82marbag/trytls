#!/bin/bash

service=$1
port=$2
first_port=$port
hostname=$3
current_hostname=$hostname
protocol=$4
filepath=$5

FIS=$IFS
IFS=$' & '

crtpath="servers/server/crt"
datapath="servers/server/data"
keypath="servers/server/key"


#inst = instruction, value = value
while read -r inst value; do
	if [ "$value" ]; then
		case $inst in
			"value")
				if [[ "$value" == "inc" ]]; then
					temp=`cat tmp/value`
					(( temp++ ))
					echo $temp > tmp/value || exit 1
				else
					echo $value > tmp/value
				fi
				;;
			"server")
				#set server name
				server=$service"_"$value
				;;
			"msg")
				#set message
				msg=$value
				;;
			"set_crt")
				#set cert (name)
				crt=$value
				;;
			"create_crt")

				#create signing request
				if [ "$value" ]; then		#voidaan asettaa crt samalla kun se tehdään
					if [[ "$value" == "hostname" ]]; then
						crt=$current_hostname
					else
						crt=$value
					fi
				fi


				#create crt into tmp dir

				echo "subjectAltName = DNS:*.$san, DNS:$san" > tmp/server.ext
				#IdenTrust
				openssl req -new -key tmp/server.key -out tmp/server.csr -subj "/C=FI/ST=Oulu/L=Oulu/O=ouspg/OU=ouspg/CN=$cn"
				#create certificate
				openssl x509 -req -days $days -in tmp/server.csr -signkey tmp/server.key -out tmp/certs/trytls_$crt.crt -extfile tmp/server.ext
				chmod 755 tmp/certs/trytls_$crt.crt

				#copy crt into mkdir "$crtpath/"$crt

				mkdir -p "$crtpath/"$crt
				cp tmp/certs/trytls_$crt.crt "$crtpath/"$crt/server.crt

				;;
			"ssl_protocols")
				#set $proto
				proto=$value
				;;
			"ssl_ciphers")
				#set $ciph
				ciph=$value
				;;
			"days")
				#set days, if days = 0, use firstday, lastday
				days=$value
				;;
			"set_current_hostname_cat")
				if [[ "$value" == "hostname" ]]; then
					value=$hostname
				fi
				current_hostname="$value`cat tmp/value`"	#e.g: 222.222.222. + 2
				;;
			"set_current_hostname")
				if [[ "$value" == "hostname" ]]; then
					current_hostname=$hostname
				else
					current_hostname=$value
				fi
				;;
			"host")
				#set common name
				if [[ "$value" == "hostname" ]]; then
					san=$current_hostname
					cn=$current_hostname
				else
					san=$value
					cn=$value
				fi
				;;
			"san")
				if [[ "$value" == "hostname" ]]; then
					san=$current_hostname
				else
					san=$value
				fi
				;;
			"cn")
				if [[ "$value" == "hostname" ]]; then
					cn=$current_hostname
				else
					cn=$value
				fi
				;;
			"push")

				if [[ "$value" && "$value" != "no_change" ]]; then		#voidaan asettaa crt samalla kun se tehdään
					if [[ "$value" == "hostname" ]]; then
						crt=$current_hostname
					else
						crt=$value
					fi
				fi

				{ echo -e "server: servers/$server\n\tport: $port using $crt.crt" ;
				  echo -e "\tprotocols: $proto ciphers: $ciph" ; } | tee -a tmp/server_info

				mkdir -p "$datapath/"$server
				echo $msg > "$datapath/"$server/index.html

				echo "$port & $msg & trytls_$crt.crt & $current_hostname" >> tmp/conf	|| exit 3

				if [[ "$protocol" == "https" ]]; then

					#DEFAULT CONF

					{ echo "" ; echo "# $server " ; \
					echo 'server {' ; \
					echo "	listen $port;" ; \

					echo '	ssl on; ' ; \
					echo "	ssl_certificate $crtpath/$crt/server.crt; " ; \
					echo "	ssl_certificate_key $keypath/server.key;" ;\

					echo '	location $keypath/ { ' ;\
					echo '	  deny all; ' ;\
					echo '	  return 403; ' ;\
					echo '	} ' ;\

					echo "	root $datapath/$server/;" ;\
					echo '	index index.html;' ;\

					echo "	ssl_protocols       $proto" ;\
					echo "	ssl_ciphers         $ciph" ;\

					echo '	server_name trytls;' ;\

					echo '	location / {' ;\
					echo '		try_files $uri $uri/ /index.html;' ;\
					echo '	}' ;\
					echo '}' ; } >> servers/default.conf || exit 3
				fi

				(( port++ ))


				;;
		esac
	fi
done <"$filepath"

IFS=$FIS

echo $port > tmp/port || exit 4
