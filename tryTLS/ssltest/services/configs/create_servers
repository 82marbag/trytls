#!/bin/bash

service=$1
port=$2
first_port=$port
hostname=$3
filepath=$4

FIS=$IFS
IFS=$' & '

#inst = instruction, value = value
while read -r inst value; do
	if [ "$value" ]; then
		case $inst in 	
			"server")
				#set server value and create folders
				server=$value
				mkdir -p $service/server/$server/ssl
				;;
			"msg")
				#set message ($service/server/$server/index.html)
				msg=$value				
				;;
			"set_crt")
				#set cert (name)
				crt=$value
				mkdir -p $service/server/$crt/ssl
				;;
			"create_crt")
				#create signing request
				if [ "$value" ]; then		#voidaan asettaa crt samalla kun se tehdään
					crt=$value
				fi
			
				#create extensions file (could be done with .cnf as well), this can be moved to it's own ext) if seen better
				echo "subjectAltName = DNS:*.$san, DNS:$san" > tmp/server.ext
				#IdenTrust
				openssl req -new -key tmp/server.key -out tmp/server.csr -subj "/C=FI/ST=Oulu/L=Oulu/O=ouspg/OU=ouspg/CN=$cn"
				#create certificate
				openssl x509 -req -days $days -in tmp/server.csr -signkey tmp/server.key -out tmp/certs/trytls_$crt.crt -extfile tmp/server.ext
				chmod 755 tmp/certs/trytls_$crt.crt
				
				;;
			"ssl_protocols")
				#set $proto
				proto=$value
				;;
			"ssl_ciphers")
				#set $ciph
				ciph=$value
				;;
			"days")
				#set days, if days = 0, use firstday, lastday
				days=$value
				;;
			"host")
				#set common name
				if [[ "$value" == "hostname" ]]; then
					san=$hostname
					cn=$hostname			
				else
					san=$value
					cn=$value
				fi
				;;
			"san")
				if [[ "$value" == "hostname" ]]; then
					san=$hostname
				else
					san=$value
				fi
				;;
			"cn")
				if [[ "$value" == "hostname" ]]; then
					cn=$hostname
				else
					cn=$value
				fi
				;;	
			"push")

				if [[ "$value" && "$value" != "no_change" ]]; then		#voidaan asettaa crt samalla kun se tehdään
					crt=$value
				fi

				{ echo -e "server: $service/$server\n\tport: $port using $crt.crt" ;
				  echo -e "\tprotocols: $proto ciphers: $ciph" ; } | tee -a tmp/server_info
				
				echo $msg > $service/server/$server/index.html

				echo "$port & $msg & trytls_$crt.crt & $hostname" >> tmp/messages

				#cp CERT AND KEY

				cp tmp/certs/trytls_$crt.crt $service/server/$crt/ssl/server.crt
				cp tmp/server.key $service/server/$server/ssl/server.key

				#DOCKERFILE

				{ echo "" ; echo "# $server "; } >> $service/Dockerfile || exit 1 

				{ echo "ADD server/$server/index.html /usr/share/nginx/server/$server/html/index.html"; \
				echo "ADD server/$crt/ssl/server.crt /etc/nginx/server/$crt/ssl/server.crt"; } \
				>> $service/Dockerfile || exit 1
				
				#DEFAULT CONF

				{ echo "" ; echo "# $server " ; \
				echo 'server {' ; \
				echo "	listen $port;" ; \

				echo '	ssl on; ' ; \
				echo "	ssl_certificate server/$crt/ssl/server.crt; " ; \
				echo '	ssl_certificate_key server/server.key;' ;\

				echo '	location /server/ { ' ;\
				echo '	  deny all; ' ;\
				echo '	  return 403; ' ;\
				echo '	} ' ;\

				echo "	root /usr/share/nginx/server/$server/html/;" ;\
				echo '	index index.html;' ;\

				echo "	ssl_protocols       $proto" ;\
				echo "	ssl_ciphers         $ciph" ;\

				echo '	server_name trytls;' ;\

				echo '	location / {' ;\
				echo '		try_files $uri $uri/ /index.html;' ;\
				echo '	}' ;\
				echo '}' ; } >> $service/default.conf || exit 3

				#inc port number by one

				(( port++ ))			


				;;
		esac
	fi
done <"$filepath"

IFS=$FIS

#update docker-compose

if [[ $service != "initialize" ]]; then

	(( last_port = port - 1 ))

	{ echo " $service:" ;\
	  echo "  build: $service" ;\
	  echo "  container_name: $service"  ;\
	  echo '  ports:' ;\
	  echo '  - "'"$first_port-$last_port:$first_port-$last_port"'"' ; }\
		>> docker-compose.yml || exit 4

	#copy private key, server.key server/. directoryyn

	cp tmp/server.key $service/server/server.key

fi

#save current port (== next server's port)

echo $port > tmp/port


#TODO: more clear + maybe something more(i.e. localhost, etc..)

